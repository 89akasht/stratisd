# Copyright 2016 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Wrapper for GetManagedObjects() result.
"""

import types

from ._implementation import FilesystemSpec
from ._implementation import ObjectManager
from ._implementation import PoolSpec


def _managed_objects_builder(specs):
    """
    Returns a function that builds a ManagedObjects class.
    This class encapsulates the locating of various managed objects
    according to the given specifications.

    :param specs: a list of interface specs
    :type specs: iterable of InterfaceSpec
    """

    def builder(namespace):
        """
        Adds properties to the class's namespace.

        :param namespace: the class's namespace
        """

        def build_function(spec):
            """
            Build a function for ManagedObject class that gets the appropriate
            objects matching a list of property values.
            """

            def the_func(self, props=None): # pragma: no cover
                """
                Takes a list of key/value pairs representing properties
                and locates the corresponding objects which implement
                the designated interface for the spec.

                :param props: a specification of properties to restrict values
                :type props: dict of str * object or NoneType
                :returns: a list of pairs of object path/dict for the interface
                :rtype: list of tuple of ObjectPath * dict

                The function has conjunctive semantics, i.e., the object
                must match for every item in props to be returned.
                If props is None or an empty dict all objects that implement
                the designated interface are returned.

                :raises KeyError: if any of keys is not a property name
                """
                props = dict() if props is None else props
                interface_name = spec.INTERFACE_NAME

                # pylint: disable=protected-access
                return (
                   (op, data) for (op, data) in self._objects.items() \
                       if interface_name in data.keys() and \
                       all(data[interface_name][key] == value \
                           for (key, value) in props.items())
                )

            return the_func

        for spec in specs:
            (_, _, method_prefix) = spec.INTERFACE_NAME.rpartition(".")
            method_name = method_prefix + "s"
            namespace[method_name] = build_function(spec)

        def __init__(self, objects): # pragma: no cover
            """
            The ManagedObjects initializer.

            :param objects: the result returned by GetManagedObjects() call.
            """
            # pylint: disable=protected-access
            self._objects = objects

        namespace['__init__'] = __init__

    return builder

ManagedObjects = types.new_class(
   "ManagedObjects",
   bases=(object,),
   exec_body=_managed_objects_builder([FilesystemSpec, PoolSpec])
)

def _gmo_builder(spec):
    """
    Returns a function that builds a method interface based on 'spec'.
    This method interface is a simple one to return the values of
    properties from a table generated by a GetManagedObjects() method call.

    :param spec: the interface specification
    :type spec: type, a subtype of InterfaceSpec
    """

    def builder(namespace):
        """
        The property class's namespace.

        :param namespace: the class's namespace
        """

        def build_property(prop): # pragma: no cover
            """
            Build a single property getter for this class.

            :param prop: the property
            """

            def dbus_func(self): # pragma: no cover
                """
                The property getter.
                """
                # pylint: disable=protected-access
                return self._table[spec.INTERFACE_NAME][prop.name]

            return dbus_func

        for prop in spec.PropertyNames:
            namespace[prop.name] = build_property(prop) # pragma: no cover

        def __init__(self, table): # pragma: no cover
            """
            The initalizer for this class.
            """
            self._table = table # pylint: disable=protected-access

        namespace['__init__'] = __init__

    return builder

GMOFilesystem = types.new_class(
   "GMOFilesystem",
   bases=(object,),
   exec_body=_gmo_builder(FilesystemSpec)
)

GMOPool = types.new_class(
   "GMOPool",
   bases=(object,),
   exec_body=_gmo_builder(PoolSpec)
)


def get_managed_objects(proxy): # pragma: no cover
    """
    Convenience function for managed objects.
    :param proxy: proxy for the manager object
    :returns: a constructed ManagedObjects object
    :rtype: ManagedObjects
    """
    return ManagedObjects(ObjectManager.GetManagedObjects(proxy))
